%%% -------------------------------------------------------------------
%%% Author  : Joq Erlang
%%% Description : 
%%%  
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(test_infra_master).

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
%%  -include("").
-include_lib("eunit/include/eunit.hrl").



%% --------------------------------------------------------------------
-export([]).

%% ====================================================================
%% External functions
%% ====================================================================

%% --------------------------------------------------------------------
%% Function: Application
%% Description:
%% Returns: non
%% ------------------------------------------------------------------

%% --------------------------------------------------------------------
%% 1. Initial set up
%% --------------------------------------------------------------------
delete_dets_file_test()->
    file:delete("infra_master"),
    file:delete("repo_mgr"),
    ok.

secure_kill_worker_nodes_test()->
    rpc:call('w0@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    rpc:call('w1@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    rpc:call('w2@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    rpc:call('w3@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    rpc:call('service_100@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    rpc:call('ppool-1_0_0@joq-desktop',erlang,halt,[],1000),
    ok.

%% --------------------------------------------------------------------
%% 3. Start repo_mgr and sinfra_mastertore template and ppool 
%% --------------------------------------------------------------------

start_repo_mgr_test()->
    ok=application:load(repo_mgr),
    ok=application:start(repo_mgr),
    ok.



%% --------------------------------------------------------------------
%% 2. Check handling workers  
%% --------------------------------------------------------------------
start_workers_test()->
    c:cd("../test_area/w0"),
    os:cmd("erl -pa brd_mgr/ebin -run brd_mgr start_brd_mgr -sname w0 -detached"),
    check_if_node_running('w0@joq-desktop',10),
    c:cd("../w1"),
    os:cmd("erl -pa brd_mgr/ebin -run brd_mgr start_brd_mgr -sname w1 -detached"),
    check_if_node_running('w1@joq-desktop',10),
    c:cd("../w2"),
    os:cmd("erl -pa brd_mgr/ebin -run brd_mgr start_brd_mgr -sname w2 -detached"),
    check_if_node_running('w2@joq-desktop',10),
  %  c:cd("../w3"),
  %  os:cmd("erl -pa brd_mgr/ebin -run brd_mgr start_brd_mgr -sname w3 -detached"),
   % timer:sleep(100),
    c:cd("../../infra_master"),
    ok.

start_test()->
    {ok,ok}=infra_master:start_infra(),
    ok.
check_allWorkers_test()->
    ["w0@joq-desktop","w1@joq-desktop","w2@joq-desktop"]=infra_master:get_active(),
    ["w3@joq-desktop"]=infra_master:get_disconnected(),
    ok.


%% testing starting a node on a board

test_start_service_node_test()->
    []=rpc:call('w0@joq-desktop',os,cmd,["erl -pa brd_mgr/ebin -sname service_100 -detached"],5000),
    %rpc:call("w0@joq-desktop",os,cmd,["erl -sname z -detached"],5000),
   % glurk=rpc:call("w0@joq-desktop",brd_mgr,rpc_call,[{erlang,time,[]}],5000),
    check_if_node_running('service_100@joq-desktop',10),
    ['w0@joq-desktop',
     'w1@joq-desktop',
     'w2@joq-desktop',
     'service_100@joq-desktop']=nodes(),
    ok.

kill_service_node_test()->
    rpc:call('service_100@joq-desktop',erlang,halt,[],1000),
    timer:sleep(100),
    ok.

%% --------------------------------------------------------------------
%% 4. Build applications and app_specs 
%% --------------------------------------------------------------------
build_template_application_test()->
    ServiceDir="template",
    DevAreaDir="../../dist_erlang-1.0.0",
    {ok,store}=repo_mgr:create_update_service(ServiceDir,DevAreaDir),
    {ok,"template-3.0.0.tar",_Binary}=repo_mgr:get_service("template","3.0.0"),
    ok.

build_ppool_test()->
    ServiceDir="ppool",
    DevAreaDir="../../dist_erlang-1.0.0",
    {ok,store}=repo_mgr:create_update_service(ServiceDir,DevAreaDir),
    {ok,"ppool-1.0.0.tar",Binary}=repo_mgr:get_service("ppool","1.0.0"),
    
    ok.

store_template_app_file_test()->
    AppBaseName="template.app_spec",
    AppFileName="app_specs/template.app_spec",
    VsnAppFile="1.23.42" ,
    {ok,Binary}=file:read_file(AppFileName),
    {ok,store}=infra_master:store_appfile(AppBaseName,VsnAppFile,Binary),
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok.


store_ppool_app_file_test()->
    AppBaseName="ppool.app_spec",
    AppFileName="app_specs/ppool.app_spec",
    VsnAppFile="1.0.4" ,
    {ok,Binary}=file:read_file(AppFileName),
    {ok,store}=infra_master:store_appfile(AppBaseName,VsnAppFile,Binary),
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok.


%  [{service,"test"}, {vsn,"1.2.3"},{board_type,all}, {numInstances,100}, {geo,no}]


%% josca test

%%

josca_test()->
    AppBaseName="template.app_spec",
    VsnAppFile="1.23.42",
    "template"=josca:service(AppBaseName,VsnAppFile),
    "3.0.0"=josca:service_vsn(AppBaseName,VsnAppFile),
    100=josca:num_instances(AppBaseName,VsnAppFile),
    no=josca:geo(AppBaseName,VsnAppFile),
    [{"ppool.app_spec","1.0.4"}]=josca:needed_services(AppBaseName,VsnAppFile),

    ok.


josca_start_order_test()->
    AppBaseName="template.app_spec",
    VsnAppFile="1.23.42",
    [{"ppool","1.0.0",1,no},{"template","3.0.0",100,no}]=josca:start_order(AppBaseName,VsnAppFile),
    ok.


store_app_sx_test()->
    store_app_file("s1.app_spec","app_specs/s1.app_spec","1.0.1"),
    store_app_file("s2.app_spec","app_specs/s2.app_spec","1.0.2"),
    store_app_file("s3.app_spec","app_specs/s3.app_spec","1.0.3"),
    store_app_file("s4.app_spec","app_specs/s4.app_spec","1.0.4"),
    store_app_file("s5.app_spec","app_specs/s5.app_spec","1.0.5"),
    store_app_file("s6.app_spec","app_specs/s6.app_spec","1.0.6"),
    store_app_file("s7.app_spec","app_specs/s7.app_spec","1.0.7"),
    ok.

josca_start_order_sx_test()->
    AppBaseName="s1.app_spec",
    VsnAppFile="1.0.1",
    [{"s7","1.7.0",7,no},
     {"s3","1.3.0",3,no},
     {"s6","1.6.0",6,yes},
     {"s5","1.5.0",5,no},
     {"s4","1.4.0",4,yes},
     {"s2","1.2.0",2,yes},
     {"s1","1.1.0",100,no}]=josca:start_order(AppBaseName,VsnAppFile),

    
    
    ok.




read_template_app_file_test()->
    AppBaseName="template.app_spec",
    VsnAppFile="1.23.42",
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok=file:write_file(AppBaseName,Binary),
    {ok,AppInfo}=file:consult(AppBaseName),

    {main_service,MainServiceInfo}=lists:keyfind(main_service,1,AppInfo),
    {needed_services,NeededServiceAppSpecs}=lists:keyfind(needed_services,1,AppInfo),

    {service,"template"}=lists:keyfind(service,1,MainServiceInfo),
    {vsn,"3.0.0" }=lists:keyfind(vsn,1,MainServiceInfo),
    {board_type,all}=lists:keyfind(board_type,1,MainServiceInfo),
    {numInstances,100}=lists:keyfind(numInstances,1,MainServiceInfo),
    {geo,no}=lists:keyfind(geo,1,MainServiceInfo),
    [{"ppool.app_spec","1.0.4"}]=NeededServiceAppSpecs,
    ok.

read_ppool_app_file_test()->
    AppBaseName="ppool.app_spec",
    VsnAppFile="1.0.4",
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok=file:write_file(AppBaseName,Binary),
    {ok,AppInfo}=file:consult(AppBaseName),

    {main_service,MainServiceInfo}=lists:keyfind(main_service,1,AppInfo),
    {needed_services,NeededServiceAppSpecs}=lists:keyfind(needed_services,1,AppInfo),

    {service,"ppool"}=lists:keyfind(service,1,MainServiceInfo),
    {vsn,"1.0.0" }=lists:keyfind(vsn,1,MainServiceInfo),
    {board_type,all}=lists:keyfind(board_type,1,MainServiceInfo),
    {numInstances,1}=lists:keyfind(numInstances,1,MainServiceInfo),
    {geo,no}=lists:keyfind(geo,1,MainServiceInfo),
    []=NeededServiceAppSpecs,
    ok.
%% --------------------------------------------------------------------
%%  Load ppool and load service tar file - start erlang node with servicename_vsn@localhost
%%  start ppool 
%% --------------------------------------------------------------------

load_ppool_app_test()->
    % Get app info
    AppBaseName="ppool.app_spec",
    VsnAppFile="1.0.4",
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok=file:write_file(AppBaseName,Binary),
    {ok,AppInfo}=file:consult(AppBaseName),
    {main_service,MainServiceInfo}=lists:keyfind(main_service,1,AppInfo),
    {needed_services,NeededServiceAppSpecs}=lists:keyfind(needed_services,1,AppInfo),
    {service,ServiceStr}=lists:keyfind(service,1,MainServiceInfo),
    {vsn,VsnStr }=lists:keyfind(vsn,1,MainServiceInfo),
    {board_type,all}=lists:keyfind(board_type,1,MainServiceInfo),
    {numInstances,1}=lists:keyfind(numInstances,1,MainServiceInfo),
    {geo,no}=lists:keyfind(geo,1,MainServiceInfo),
    []=NeededServiceAppSpecs,

%%  Store and unpack tar file att node
    {ok,TarBaseName,BinaryTar}=repo_mgr:get_service(ServiceStr,VsnStr),   
    ok=rpc:call('w0@joq-desktop', file,write_file,[TarBaseName,BinaryTar],5000),
    ok=rpc:call('w0@joq-desktop',erl_tar,extract,[TarBaseName],5000),
    ok=rpc:call('w0@joq-desktop',file,delete,[TarBaseName],5000),

    
   % Start specific erlang node the service 
   % Create NodeStr
   % Create erl command
   % start node
   % start ppool
                    % Create NodeStr
    "joq-desktop"=rpc:call('w0@joq-desktop',net_adm,localhost,[],5000),
    LocalHostStr=rpc:call('w0@joq-desktop',net_adm,localhost,[],5000),
    SpecialVsn=string:join( string:tokens(VsnStr,"."),"_"),
    NodeStr=ServiceStr++"-"++SpecialVsn++"@"++LocalHostStr,

                           % Create erl command & start node
    Path=filename:join(ServiceStr++"-"++VsnStr,"ebin"),
 %   glurk=rpc:call('w0@joq-desktop',file,list_dir,[Path],5000),
    ErlCmd="erl -pa "++Path++" -sname "++NodeStr++" "++"-detached",
    []=rpc:call('w0@joq-desktop',os,cmd,[ErlCmd],5000),
    timer:sleep(500),
    Date=erlang:date(),
    Date=rpc:call('ppool-1_0_0@joq-desktop',erlang,date,[],1000),
    Node=list_to_atom(NodeStr),
    Date=rpc:call(Node,erlang,date,[],1000),

   % start ppool
    Service=list_to_atom(ServiceStr),
    ok=rpc:call(Node,application,load,[Service],1000),
    ok=rpc:call(Node,application,start,[Service],1000),
    {badrpc,nodedown}=rpc:call(Node,erlang,halt,[],1000),
  %
    ok.


%% --------------------------------------------------------------------
%%  Load template and ppool and load service tar file - start erlang node with servicename_vsn@localhost
%%  

load_ppool_app_2_test()->
    % Get app info
    AppBaseName="ppool.app_spec",
    VsnAppFile="1.0.4",
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok=file:write_file(AppBaseName,Binary),
    {ok,AppInfo}=file:consult(AppBaseName),
    {main_service,MainServiceInfo}=lists:keyfind(main_service,1,AppInfo),
    {needed_services,NeededServiceAppSpecs}=lists:keyfind(needed_services,1,AppInfo),
    {service,ServiceStr}=lists:keyfind(service,1,MainServiceInfo),
    {vsn,VsnStr }=lists:keyfind(vsn,1,MainServiceInfo),
    {board_type,all}=lists:keyfind(board_type,1,MainServiceInfo),
    {numInstances,1}=lists:keyfind(numInstances,1,MainServiceInfo),
    {geo,no}=lists:keyfind(geo,1,MainServiceInfo),
    []=NeededServiceAppSpecs,

%%  Store and unpack tar file att node
    {ok,TarBaseName,BinaryTar}=repo_mgr:get_service(ServiceStr,VsnStr),   
    ok=rpc:call('w0@joq-desktop', file,write_file,[TarBaseName,BinaryTar],5000),
    ok=rpc:call('w0@joq-desktop',erl_tar,extract,[TarBaseName],5000),
    ok=rpc:call('w0@joq-desktop',file,delete,[TarBaseName],5000),

    
   % Start specific erlang node the service 
   % Create NodeStr
   % Create erl command
   % start node
   % start ppool
                    % Create NodeStr
    "joq-desktop"=rpc:call('w0@joq-desktop',net_adm,localhost,[],5000),
    LocalHostStr=rpc:call('w0@joq-desktop',net_adm,localhost,[],5000),
    SpecialVsn=string:join( string:tokens(VsnStr,"."),"_"),
    NodeStr=ServiceStr++"-"++SpecialVsn++"@"++LocalHostStr,

                           % Create erl command & start node
    Path=filename:join(ServiceStr++"-"++VsnStr,"ebin"),
 %   glurk=rpc:call('w0@joq-desktop',file,list_dir,[Path],5000),
    ErlCmd="erl -pa "++Path++" -sname "++NodeStr++" "++"-detached",
    []=rpc:call('w0@joq-desktop',os,cmd,[ErlCmd],5000),
    timer:sleep(500),
    Date=erlang:date(),
    Date=rpc:call('ppool-1_0_0@joq-desktop',erlang,date,[],1000),
    Node=list_to_atom(NodeStr),
    Date=rpc:call(Node,erlang,date,[],1000),

   % start ppool
    Service=list_to_atom(ServiceStr),
    ok=rpc:call(Node,application,load,[Service],1000),
    ok=rpc:call(Node,application,start,[Service],1000),
    {badrpc,nodedown}=rpc:call(Node,erlang,halt,[],1000),
  %
    ok.


%%%%  Check application management


% clean up before stopping
kill_worker_nodes_test()->
    rpc:call('w0@joq-desktop',erlang,halt,[],1000),
    rpc:call('w1@joq-desktop',erlang,halt,[],1000),
    check_if_node_stopped('w1@joq-desktop',10), 
    rpc:call('w2@joq-desktop',erlang,halt,[],1000),
    rpc:call('w3@joq-desktop',erlang,halt,[],1000),
    rpc:call('ppool-1_0_0@joq-desktop',erlang,halt,[],1000),
    ok.

% stop repo_mgr and remove dets file
stop_repo_mgr_test()->
    ok=application:stop(repo_mgr),
    ok=application:unload(repo_mgr),
    file:delete("repo_mgr"),
    ok.

stop_test()->    
    spawn(fun()->kill_session() end),
    ok.
kill_session()->
    timer:sleep(1000),
    erlang:halt(),
    ok.

%%-----------------------------------------------------
check_if_node_running(Node,Period)->
    N=do_ping(Node,Period,0,false),
    N.

do_ping(_Node,_Period,N,true)->
    N;
do_ping(Node,Period,N,Quit)->
    case net_adm:ping(Node) of
	pong->
	    NewQuit=true,
	    NewN=N;
	pang->
	    timer:sleep(Period),
	    NewQuit=Quit,
	    NewN=N+1
    end,
    do_ping(Node,Period,NewN,NewQuit).

check_if_node_stopped(Node,Period)->
    N=do_pang(Node,Period,0,false),
    N.

do_pang(_Node,_Period,N,true)->
    N;
do_pang(Node,Period,N,Quit)->
    case net_adm:ping(Node) of
	pang->
	    NewQuit=true,
	    NewN=N;
	pong->
	    timer:sleep(Period),
	    NewQuit=Quit,
	    NewN=N+1
    end,
    do_pang(Node,Period,NewN,NewQuit).
	    

store_app_file(AppBaseName,AppFileName,VsnAppFile)->
    {ok,Binary}=file:read_file(AppFileName),
    {ok,store}=infra_master:store_appfile(AppBaseName,VsnAppFile,Binary),
    {AppBaseName,Binary}=infra_master:get_appfile(AppBaseName,VsnAppFile),
    ok.
